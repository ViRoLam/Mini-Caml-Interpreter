# 1 "mmllexer.mll"
 

  open Lexing
  open Mmlparser

  exception Lexing_error of string   

  let keyword_or_ident =
    let h = Hashtbl.create 22 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "true" , TRUE ;
      "false" , FALSE ;
      "fun" , FUN ;
      "let" , LET ; 
      "rec" , REC ;
      "in" , IN;
      "if", IF;
      "then", THEN;
      "else", ELSE;
      "mod", MOD;
      "not", NOT;
      "type", TYPE;
      "int", INT;
      "bool", BOOL;
      "unit", UNIT;
      "mutable",MUTABLE ;
      "for", FOR ;
      "to", TO ;
      "do", DO ;
      "done", DONE ;
      "while", WHILE ;] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
        

# 39 "mmllexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\229\255\230\255\233\255\234\255\235\255\236\255\237\255\
    \238\255\002\000\001\000\017\000\002\000\246\255\002\000\004\000\
    \249\255\250\255\079\000\018\000\002\000\002\000\255\255\253\255\
    \245\255\231\255\244\255\232\255\242\255\241\255\240\255\037\000\
    \252\255\253\255\034\000\039\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\025\000\025\000\012\000\025\000\255\255\008\000\007\000\
    \255\255\255\255\004\000\003\000\016\000\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\002\000\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\022\000\021\000\000\000\021\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\012\000\021\000\000\000\000\000\000\000\010\000\029\000\
    \020\000\008\000\016\000\017\000\023\000\014\000\003\000\013\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\004\000\005\000\011\000\015\000\027\000\026\000\
    \025\000\024\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\037\000\034\000\028\000\035\000\
    \036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\007\000\009\000\006\000\030\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\018\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\021\000\255\255\000\000\255\255\021\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\021\000\255\255\255\255\255\255\000\000\010\000\
    \000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\011\000\012\000\
    \014\000\015\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\034\000\031\000\011\000\031\000\
    \035\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\009\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\018\000\255\255\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\031\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 44 "mmllexer.mll"
             ( new_line lexbuf; token lexbuf )
# 168 "mmllexer.ml"

  | 1 ->
# 45 "mmllexer.mll"
                     ( token lexbuf )
# 173 "mmllexer.ml"

  | 2 ->
# 46 "mmllexer.mll"
           ( comment lexbuf; token lexbuf )
# 178 "mmllexer.ml"

  | 3 ->
let
# 47 "mmllexer.mll"
              n
# 184 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 47 "mmllexer.mll"
                  ( CST(int_of_string n) )
# 188 "mmllexer.ml"

  | 4 ->
let
# 48 "mmllexer.mll"
             id
# 194 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 48 "mmllexer.mll"
                (keyword_or_ident id)
# 198 "mmllexer.ml"

  | 5 ->
# 49 "mmllexer.mll"
        ( PLUS )
# 203 "mmllexer.ml"

  | 6 ->
# 50 "mmllexer.mll"
        ( STAR )
# 208 "mmllexer.ml"

  | 7 ->
# 51 "mmllexer.mll"
        (EQUAL)
# 213 "mmllexer.ml"

  | 8 ->
# 52 "mmllexer.mll"
        (MINUS)
# 218 "mmllexer.ml"

  | 9 ->
# 53 "mmllexer.mll"
        (DIV)
# 223 "mmllexer.ml"

  | 10 ->
# 54 "mmllexer.mll"
         (BOOL_EQUAL)
# 228 "mmllexer.ml"

  | 11 ->
# 55 "mmllexer.mll"
         (DIFF)
# 233 "mmllexer.ml"

  | 12 ->
# 56 "mmllexer.mll"
        (INF)
# 238 "mmllexer.ml"

  | 13 ->
# 57 "mmllexer.mll"
         (INF_OR_EQ)
# 243 "mmllexer.ml"

  | 14 ->
# 58 "mmllexer.mll"
         (AND)
# 248 "mmllexer.ml"

  | 15 ->
# 59 "mmllexer.mll"
         (OR)
# 253 "mmllexer.ml"

  | 16 ->
# 60 "mmllexer.mll"
        (LPAR)
# 258 "mmllexer.ml"

  | 17 ->
# 61 "mmllexer.mll"
        (RPAR)
# 263 "mmllexer.ml"

  | 18 ->
# 62 "mmllexer.mll"
        (LBRACKET)
# 268 "mmllexer.ml"

  | 19 ->
# 63 "mmllexer.mll"
        (RBRACKET)
# 273 "mmllexer.ml"

  | 20 ->
# 64 "mmllexer.mll"
        (SEMICOLON)
# 278 "mmllexer.ml"

  | 21 ->
# 65 "mmllexer.mll"
        (COLON)
# 283 "mmllexer.ml"

  | 22 ->
# 66 "mmllexer.mll"
        (POINT)
# 288 "mmllexer.ml"

  | 23 ->
# 67 "mmllexer.mll"
         (LARROW)
# 293 "mmllexer.ml"

  | 24 ->
# 68 "mmllexer.mll"
         (RARROW)
# 298 "mmllexer.ml"

  | 25 ->
# 69 "mmllexer.mll"
      ( raise (Lexing_error ("unknown character : " ^ (lexeme lexbuf))) )
# 303 "mmllexer.ml"

  | 26 ->
# 70 "mmllexer.mll"
        ( EOF )
# 308 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 31
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 74 "mmllexer.mll"
      ( () )
# 320 "mmllexer.ml"

  | 1 ->
# 76 "mmllexer.mll"
      ( comment lexbuf; comment lexbuf )
# 325 "mmllexer.ml"

  | 2 ->
# 78 "mmllexer.mll"
      ( comment lexbuf )
# 330 "mmllexer.ml"

  | 3 ->
# 80 "mmllexer.mll"
      ( raise (Lexing_error "unterminated comment") )
# 335 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

